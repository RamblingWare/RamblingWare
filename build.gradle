plugins {
  id 'java'
  id 'jacoco'
  id 'application'
}

group = 'com.amdelamar'
jar.baseName = 'oddox'
version = '0.1.0'
description = 'open source blog with an offline-first writer'
mainClassName = 'com.amdelamar.OddoxVerticle'
sourceCompatibility = 1.9
targetCompatibility = 1.9
compileJava.options.encoding = 'UTF-8'

repositories {
  jcenter()
}

// Integration Test compile extension
configurations {
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
  // framework
  compile 'io.vertx:vertx-core:3.5.+'
  compile 'io.vertx:vertx-rx-java2:3.5.+'
  compile 'io.vertx:vertx-web:3.5.+'

  // templates
  compile 'io.vertx:vertx-web-templ-freemarker:3.5.+'
  compile 'org.freemarker:freemarker:2.3.+'

  // database
  compile 'com.cloudant:cloudant-client:2.+'
  compile 'com.google.code.gson:gson:2.8.+'
  // compile 'com.squareup.okhttp3:okhttp-urlconnection:3.8.+'

  // logging
  compile 'org.apache.logging.log4j:log4j-api:2.11.+'
  compile 'org.apache.logging.log4j:log4j-core:2.11.+'
  compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.11.+'
  compile 'org.slf4j:slf4j-api:1.7.+'

  // testing
  testCompile 'junit:junit:4.12'
  testCompile 'org.mockito:mockito-core:2.+'
  testCompile 'io.vertx:vertx-unit:3.5.+'
  integrationTestCompile 'junit:junit:4.12'
  integrationTestCompile 'org.mockito:mockito-core:2.+'
}

// Integration Test setup
sourceSets {
  integrationTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/it/java')
    }
    resources.srcDir file('src/it/resources')
  }
}
task integrationTest(type: Test) {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
}
check.dependsOn integrationTest
integrationTest.mustRunAfter test

// Jacoco Test reports
jacocoTestReport {
  reports {
    xml.enabled true
    html.enabled true
  }
}

// Packaging setup
javadoc {
  source = sourceSets.main.allJava
  classpath = configurations.compile
}
jar {
  manifest {
    attributes 'Main-Class': mainClassName
  }
  from {
    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  }
}
